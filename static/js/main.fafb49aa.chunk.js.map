{"version":3,"sources":["components/Logs.js","components/Vote.js","App.js","serviceWorker.js","index.js"],"names":["Logs","useState","logs","setLogs","getLogs","a","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","response","json","catch","err","console","log","onClick","map","date","url","JSON","stringify","Vote","props","voteByNumber","num","body","number","getData","closeModal","className","id","key","App","modalIsOpen","setIsOpen","route","setRoute","numData","setNumData","query","setQuery","setUrl","useEffect","type","value","onChange","event","target","ariaHideApp","isOpen","onRequestClose","contentLabel","center","viewBoxSize","segmentsShift","radius","lineWidth","data","title","count","color","Math","floor","random","label","dataEntry","round","percentage","labelPosition","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fafb49aa.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Logo.css';\r\n\r\nconst Logs = () => {\r\n\r\n    const [logs, setLogs] = useState([]);\r\n    const getLogs = async () => {\r\n        await fetch('https://number-votes-api.herokuapp.com/logs', {\r\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n              // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrerPolicy: 'no-referrer', // no-referrer, *client\r\n          })\r\n          .then(response => response.json())\r\n          .then((response)=>{\r\n              setLogs(response);\r\n          }).catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={getLogs}>Get logs</button>\r\n            <table>\r\n                <tr>\r\n                    <th>Date</th>\r\n                    <th>Url</th>\r\n                    <th>JSON</th>\r\n                </tr>\r\n            {logs.map(log=>(\r\n            <tr>\r\n                <th>{log.date}</th>\r\n                <th>{log.url}</th>\r\n                <th>{JSON.stringify(log.json, null, 2)}</th>                     \r\n            </tr>  \r\n            ))}\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\nexport default Logs;","import React from 'react';\r\nimport './Vote.css';\r\n\r\nconst Vote = (props) => {\r\n\r\n    const voteByNumber = async (num) => {\r\n        await fetch('https://number-votes-api.herokuapp.com/vote', {\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n              // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrerPolicy: 'no-referrer', // no-referrer, *client\r\n            body: JSON.stringify({number: num}) // body data type must match \"Content-Type\" header\r\n          })\r\n          .then(response => response.json())\r\n          .then(()=>{\r\n            props.getData();\r\n            props.closeModal();\r\n          }).catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"Vote\">\r\n            {[1,2,3,4,5,6,7,8,9].map(num=>(\r\n                <button id=\"number\" key={num} onClick={() => voteByNumber(num)}>{num}</button>\r\n            ))}\r\n            <button id=\"close\" onClick={props.closeModal}>Cancel</button>\r\n        </div>\r\n    );\r\n}\r\nexport default Vote;","import React, { useState, useEffect } from 'react';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport Modal from 'react-modal';\nimport Logs from './components/Logs';\nimport Vote from './components/Vote';\nimport './App.css';\n//Modal.setAppElement(el);\n\nfunction App() {\n\n  const [modalIsOpen,setIsOpen] = useState(false);\n  function openModal() {\n    setIsOpen(true);\n  }\n  function closeModal(){\n    setIsOpen(false);\n  }\n\n  const [route, setRoute] = useState('main');\n  const onRouteChange = () => {\n    if (route === 'main') {\n      setRoute('logs');\n    } else if (route === 'logs') {\n      setRoute('main');\n    }\n  }\n\n  const [numData, setNumData] = useState([]);\n  const [query, setQuery] = useState('2020-10-05');\n  const [url, setUrl] = useState(\n    'https://number-votes-api.herokuapp.com/statistic?date=2020-10-05'\n  );\n\n  useEffect(()=> {\n    getData();\n  }, [url]);\n\n  const getData = async () => {\n    await fetch(url, {\n      method: 'GET', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *client\n    })\n    .then(response => response.json())\n    .then(response => setNumData(response))\n    .then(response=>{\n      console.log(response);\n    }).catch(err => console.log(err));\n  }\n  return (\n    <div className=\"App\">\n\n      <button onClick={onRouteChange}>Logs/Main page</button>\n      { route === 'main' ?\n      <div>\n        <p>Enter data (e.g. \"2020-10-05\")</p>\n        <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}        \n        />\n        <button onClick={() => {setUrl(`https://number-votes-api.herokuapp.com/statistic?date=${query}`)}}>Get votes</button>\n        <button onClick={openModal}>Vote</button>\n        <Modal\n          className=\"Modal\"\n          ariaHideApp={false}\n          isOpen={modalIsOpen}\n          onRequestClose={closeModal}\n          contentLabel=\"Example Modal\"\n        >\n          <Vote closeModal={closeModal} getData={getData}/>\n        </Modal>\n        <PieChart \n          className=\"Chart\"\n          center={[150, 110]}\n          viewBoxSize={[300,300]}\n          segmentsShift={2}\n          radius={100}\n          lineWidth={90}\n          data = {numData.map(num => (\n            { title:num.number, value:num.count, color: `#${num.count > 9 ? Math.floor(Math.random() * 10)+'F' : num.count+'0'}F`}\n          ))} \n          label = {( data ) => `${data.dataEntry.title}(${Math.round(data.dataEntry.percentage)}%)`}\n          labelPosition = {70}\n        />\n      </div>\n      :\n      <Logs/>\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}