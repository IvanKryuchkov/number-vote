{"version":3,"sources":["components/Logs.js","components/Vote.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Logs","useState","logs","setLogs","getLogs","a","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","response","json","catch","err","console","log","onClick","map","date","url","JSON","stringify","Vote","props","voteByNumber","num","body","number","getData","closeModal","className","id","key","Main","modalIsOpen","setIsOpen","numData","setNumData","query","setQuery","setUrl","useEffect","type","value","onChange","event","target","ariaHideApp","isOpen","onRequestClose","contentLabel","length","center","viewBoxSize","segmentsShift","radius","lineWidth","data","title","_id","count","color","Math","floor","random","label","dataEntry","round","percentage","labelPosition","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ba6acc6b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Logo.css';\r\n\r\nconst Logs = () => {\r\n\r\n    const [logs, setLogs] = useState([]);\r\n    const getLogs = async () => {\r\n        await fetch('https://number-votes-api.herokuapp.com/logs', {\r\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n              // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrerPolicy: 'no-referrer', // no-referrer, *client\r\n          })\r\n          .then(response => response.json())\r\n          .then((response)=>{\r\n              setLogs(response);\r\n          }).catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={getLogs}>Get logs</button>\r\n            <table>\r\n                <tr>\r\n                    <th>Date</th>\r\n                    <th>Url</th>\r\n                    <th>JSON</th>\r\n                </tr>\r\n            {logs.map(log=>(\r\n            <tr>\r\n                <th>{log.date}</th>\r\n                <th>{log.url}</th>\r\n                <th>{JSON.stringify(log.json, null, 2)}</th>                     \r\n            </tr>  \r\n            ))}\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\nexport default Logs;","import React from 'react';\r\nimport './Vote.css';\r\n\r\nconst Vote = (props) => {\r\n\r\n    const voteByNumber = async (num) => {\r\n        await fetch('https://number-votes-api.herokuapp.com/vote', {\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n              // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrerPolicy: 'no-referrer', // no-referrer, *client\r\n            body: JSON.stringify({number: num}) // body data type must match \"Content-Type\" header\r\n          })\r\n          .then(response => response.json())\r\n          .then(()=>{\r\n            props.getData();\r\n            props.closeModal();\r\n          }).catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"Vote\">\r\n            {[1,2,3,4,5,6,7,8,9].map(num=>(\r\n                <button id=\"number\" key={num} onClick={() => voteByNumber(num)}>{num}</button>\r\n            ))}\r\n            <button id=\"close\" onClick={props.closeModal}>Cancel</button>\r\n        </div>\r\n    );\r\n}\r\nexport default Vote;","import React, { useState, useEffect } from 'react';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport Vote from './Vote';\r\nimport Modal from 'react-modal';\r\nimport './Main.css';\r\n\r\nconst Main = () => {\r\n\r\n    const [modalIsOpen,setIsOpen] = useState(false);\r\n    function openModal() {\r\n      setIsOpen(true);\r\n    }\r\n    function closeModal(){\r\n      setIsOpen(false);\r\n    }\r\n  \r\n    const [numData, setNumData] = useState([]);\r\n    const [query, setQuery] = useState('2020-10-05');\r\n    const [url, setUrl] = useState(\r\n      'https://number-votes-api.herokuapp.com/statistic?date=2020-10-05'\r\n    );\r\n  \r\n    useEffect(()=> {\r\n      getData();\r\n    }, [url]);\r\n  \r\n    const getData = async () => {\r\n      await fetch(url, {\r\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *client\r\n      })\r\n      .then(response => response.json())\r\n      .then(response => setNumData(response))\r\n      .then(response=>{\r\n        console.log(response);\r\n      }).catch(err => console.log(err));\r\n    }\r\n    return (\r\n        <div>\r\n          <p>Enter data (e.g. \"2020-10-05\")</p>\r\n          <input\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={event => setQuery(event.target.value)}        \r\n          />\r\n          <button onClick={() => {setUrl(`https://number-votes-api.herokuapp.com/statistic?date=${query}`)}}>Get votes</button>\r\n          <button onClick={openModal}>Vote</button>\r\n          <Modal\r\n            className=\"Modal\"\r\n            ariaHideApp={false}\r\n            isOpen={modalIsOpen}\r\n            onRequestClose={closeModal}\r\n            contentLabel=\"Example Modal\"\r\n          >\r\n            <Vote closeModal={closeModal} getData={getData}/>\r\n          </Modal>\r\n          { \r\n            numData.length==0 ? \r\n            <div>No data</div> \r\n            :\r\n            <PieChart \r\n            className=\"Chart\"\r\n            center={[150, 110]}\r\n            viewBoxSize={[300,300]}\r\n            segmentsShift={2}\r\n            radius={100}\r\n            lineWidth={90}\r\n            data = {numData.map(num => (\r\n              { title:num._id, value:num.count, color: `#${num.count > 9 ? Math.floor(Math.random() * 10)+'F' : num.count+'0'}F`}\r\n            ))} \r\n            label = {( data ) => `${data.dataEntry.title}(${Math.round(data.dataEntry.percentage)}%)`}\r\n            labelPosition = {70}\r\n            />\r\n        }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport {\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Logs from './components/Logs';\nimport Main from './components/Main';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      \n      <nav>\n        <div><Link to=\"/\">Main</Link></div>\n        <div><Link to=\"/logs\">Logs</Link></div>\n      </nav>\n\n      <Switch>\n          <Route exact path=\"/\">\n            <Main />\n          </Route>\n          <Route path=\"/logs\">\n            <Logs/>\n          </Route>\n        </Switch>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}